{"ast":null,"code":"import { apiSlice } from \"../api/apiSlice\";\nimport { userLoggedIn } from \"./authSlice\";\nexport const authApi = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    register: builder.mutation({\n      query: data => ({\n        url: \"/register\",\n        method: \"POST\",\n        body: data\n      }),\n\n      async onQueryStarted(arg, _ref) {\n        let {\n          queryFulfilled,\n          dispatch\n        } = _ref;\n\n        try {\n          const result = await queryFulfilled;\n          localStorage.setItem(\"auth\", JSON.stringify({\n            accessToken: result.data.accessToken,\n            user: result.data.user\n          }));\n          dispatch(userLoggedIn({\n            accessToken: result.data.accessToken,\n            user: result.data.user\n          }));\n        } catch (err) {// do nothing\n        }\n      }\n\n    }),\n    login: builder.mutation({\n      query: data => ({\n        url: \"/login\",\n        method: \"POST\",\n        body: data\n      }),\n\n      async onQueryStarted(arg, _ref2) {\n        let {\n          queryFulfilled,\n          dispatch\n        } = _ref2;\n\n        try {\n          const result = await queryFulfilled;\n          localStorage.setItem(\"auth\", JSON.stringify({\n            accessToken: result.data.accessToken,\n            user: result.data.user\n          }));\n          dispatch(userLoggedIn({\n            accessToken: result.data.accessToken,\n            user: result.data.user\n          }));\n        } catch (err) {// do nothing\n        }\n      }\n\n    })\n  })\n});\nexport const {\n  useLoginMutation,\n  useRegisterMutation\n} = authApi;","map":{"version":3,"names":["apiSlice","userLoggedIn","authApi","injectEndpoints","endpoints","builder","register","mutation","query","data","url","method","body","onQueryStarted","arg","queryFulfilled","dispatch","result","localStorage","setItem","JSON","stringify","accessToken","user","err","login","useLoginMutation","useRegisterMutation"],"sources":["/var/www/html/NewsAggregator/frontend/src/features/auth/authApi.js"],"sourcesContent":["import { apiSlice } from \"../api/apiSlice\";\nimport { userLoggedIn } from \"./authSlice\";\n\nexport const authApi = apiSlice.injectEndpoints({\n    endpoints: (builder) => ({\n        register: builder.mutation({\n            query: (data) => ({\n                url: \"/register\",\n                method: \"POST\",\n                body: data,\n            }),\n            async onQueryStarted(arg, { queryFulfilled, dispatch }) {\n                try {\n                    const result = await queryFulfilled;\n\n                    localStorage.setItem(\n                        \"auth\",\n                        JSON.stringify({\n                            accessToken: result.data.accessToken,\n                            user: result.data.user,\n                        })\n                    );\n\n                    dispatch(\n                        userLoggedIn({\n                            accessToken: result.data.accessToken,\n                            user: result.data.user,\n                        })\n                    );\n                } catch (err) {\n                    // do nothing\n                }\n            },\n        }),\n        login: builder.mutation({\n            query: (data) => ({\n                url: \"/login\",\n                method: \"POST\",\n                body: data,\n            }),\n\n            async onQueryStarted(arg, { queryFulfilled, dispatch }) {\n                try {\n                    const result = await queryFulfilled;\n\n                    localStorage.setItem(\n                        \"auth\",\n                        JSON.stringify({\n                            accessToken: result.data.accessToken,\n                            user: result.data.user,\n                        })\n                    );\n\n                    dispatch(\n                        userLoggedIn({\n                            accessToken: result.data.accessToken,\n                            user: result.data.user,\n                        })\n                    );\n                } catch (err) {\n                    // do nothing\n                }\n            },\n        }),\n    }),\n});\n\nexport const { useLoginMutation, useRegisterMutation } = authApi;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,iBAAzB;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,OAAO,MAAMC,OAAO,GAAGF,QAAQ,CAACG,eAAT,CAAyB;EAC5CC,SAAS,EAAGC,OAAD,KAAc;IACrBC,QAAQ,EAAED,OAAO,CAACE,QAAR,CAAiB;MACvBC,KAAK,EAAGC,IAAD,KAAW;QACdC,GAAG,EAAE,WADS;QAEdC,MAAM,EAAE,MAFM;QAGdC,IAAI,EAAEH;MAHQ,CAAX,CADgB;;MAMvB,MAAMI,cAAN,CAAqBC,GAArB,QAAwD;QAAA,IAA9B;UAAEC,cAAF;UAAkBC;QAAlB,CAA8B;;QACpD,IAAI;UACA,MAAMC,MAAM,GAAG,MAAMF,cAArB;UAEAG,YAAY,CAACC,OAAb,CACI,MADJ,EAEIC,IAAI,CAACC,SAAL,CAAe;YACXC,WAAW,EAAEL,MAAM,CAACR,IAAP,CAAYa,WADd;YAEXC,IAAI,EAAEN,MAAM,CAACR,IAAP,CAAYc;UAFP,CAAf,CAFJ;UAQAP,QAAQ,CACJf,YAAY,CAAC;YACTqB,WAAW,EAAEL,MAAM,CAACR,IAAP,CAAYa,WADhB;YAETC,IAAI,EAAEN,MAAM,CAACR,IAAP,CAAYc;UAFT,CAAD,CADR,CAAR;QAMH,CAjBD,CAiBE,OAAOC,GAAP,EAAY,CACV;QACH;MACJ;;IA3BsB,CAAjB,CADW;IA8BrBC,KAAK,EAAEpB,OAAO,CAACE,QAAR,CAAiB;MACpBC,KAAK,EAAGC,IAAD,KAAW;QACdC,GAAG,EAAE,QADS;QAEdC,MAAM,EAAE,MAFM;QAGdC,IAAI,EAAEH;MAHQ,CAAX,CADa;;MAOpB,MAAMI,cAAN,CAAqBC,GAArB,SAAwD;QAAA,IAA9B;UAAEC,cAAF;UAAkBC;QAAlB,CAA8B;;QACpD,IAAI;UACA,MAAMC,MAAM,GAAG,MAAMF,cAArB;UAEAG,YAAY,CAACC,OAAb,CACI,MADJ,EAEIC,IAAI,CAACC,SAAL,CAAe;YACXC,WAAW,EAAEL,MAAM,CAACR,IAAP,CAAYa,WADd;YAEXC,IAAI,EAAEN,MAAM,CAACR,IAAP,CAAYc;UAFP,CAAf,CAFJ;UAQAP,QAAQ,CACJf,YAAY,CAAC;YACTqB,WAAW,EAAEL,MAAM,CAACR,IAAP,CAAYa,WADhB;YAETC,IAAI,EAAEN,MAAM,CAACR,IAAP,CAAYc;UAFT,CAAD,CADR,CAAR;QAMH,CAjBD,CAiBE,OAAOC,GAAP,EAAY,CACV;QACH;MACJ;;IA5BmB,CAAjB;EA9Bc,CAAd;AADiC,CAAzB,CAAhB;AAgEP,OAAO,MAAM;EAAEE,gBAAF;EAAoBC;AAApB,IAA4CzB,OAAlD"},"metadata":{},"sourceType":"module"}